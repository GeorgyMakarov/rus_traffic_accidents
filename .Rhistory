severity <= 0.35 ~ "moderate"
))
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
sev_rate$cas_type <- as.factor(sev_rate$cas_type)
sev_rate <- sev_rate %>% select(-c(driving_mode, hour, year, mmonth, mday,
hhour, mminute))
head(sev_rate)
# Analysis of frequency ---------------------------------------------------
# histogram of casualties by month and day of week
ggplot(sev_rate) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
# bubble chart of accidents by time and casualties
# exclude dust and dirty road conditions as there are few accidents
nodirt_nodust <- sev_rate %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = sev_class), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
# severity of accident by number of participants and vehicles and types
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("number of vehicles") +
scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9)) +
facet_wrap(~ kuch, nrow = 2) + ylab("")
library(maps)
?maps
??maps
data("world.cities")
world.cities
filter(world.cities, country.etc == "Russia")
filter(world.cities, country.etc == "Russia" & name == "Saint-Petersburg")
filter(world.cities, country.etc == "Russia")
p <- filter(world.cities, country.etc == "Russia")
View(p)
map.cities(country = "China", capitals = 2)
library(maps)
map.cities(country = "China", capitals = 2)
map("world", "China")
map.cities(country = "China", capitals = 2)
map("state", "New Jersey")
data(us.cities)
map.cities(us.cities, country="NJ")
?map
help(package == 'maps')
help(package = 'maps')
data <- world.cities %>% filter(country.etc == "Russia" & name == "Saint Petersburg")
map(data)
map("world", "Saint Petersburg")
?maps
?map
russia <- map_data("russia")
russia <- map_data("Russia")
library(maps)
UK <- map_data("world") %>% filter(region=="UK")
data <- world.cities %>% filter(country.etc == "UK")
ggplot() +
geom_polygon(data = UK, aes(x = long, y = lat, group = group), fill = "grey", alpha = 0.3)
?world
data(world)
data(worldMapEnv)
worldMapEnv
UK <- map_data("world") %>% filter(region == "Russia")
ggplot() +
geom_polygon(data = UK, aes(x = long, y = lat, group = group), fill = "grey", alpha = 0.3)
UK <- map_data("world.cities") %>% filter(region == "Russia") %>% filter(name == "Saint Petersburg")
UK <- map_data("world") %>% filter(region == "Russia") %>% filter(name == "Saint Petersburg")
UK <- map_data("world") %>% filter(region == "Russia")
?map_data
library(plotly)
fig <- sev_rate
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = severity,
radius = 10)
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = 'severity',
radius = 10)
fig
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = 'severity',
radius = 10)
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = 'severity',
radius = 10)
fig <- sev_rate
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = 'severity',
radius = 10)
fig
# Exploratory data analysis -----------------------------------------------
# prerequisite packages
library(dplyr)
library(ggplot2)
library(lubridate)
# read data
clean_data <- read.csv("clean_data.csv")
clean_data <- clean_data %>% select(-X)
clean_data <- data.frame(clean_data)
clean_data$date <- ymd(clean_data$date)
clean_data$time <- as.POSIXct(clean_data$time)
clean_data <- clean_data %>% mutate(hour = hour(clean_data$time),
casualties = fatal + injury)
clean_data$month <- month(clean_data$date, label = TRUE)
clean_data$day <- wday(clean_data$date, label = TRUE)
clean_data <- clean_data %>% mutate(cas_type = case_when(
fatal > 0 ~ "fatal",
injury > 0 ~ "injury",
TRUE ~ "non-injury"
))
# add severity rate and severity class to dataset
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
mmonth = month(date),
mday = mday(date),
hhour = hour(time),
mminute = minute(time)) %>%
mutate(timeline = make_datetime(year, mmonth, mday, hhour, mminute))
sev_rate <- sev_rate %>% mutate(sev_class = case_when(
severity > 0.35 ~ "serious",
severity <= 0.35 ~ "moderate"
))
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
sev_rate$cas_type <- as.factor(sev_rate$cas_type)
sev_rate <- sev_rate %>% select(-c(driving_mode, hour, year, mmonth, mday,
hhour, mminute))
head(sev_rate)
# Analysis of frequency ---------------------------------------------------
# histogram of casualties by month and day of week
ggplot(sev_rate) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
# bubble chart of accidents by time and casualties
# exclude dust and dirty road conditions as there are few accidents
nodirt_nodust <- sev_rate %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = sev_class), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
# severity of accident by number of participants and vehicles and types
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("number of vehicles") +
scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9)) +
facet_wrap(~ kuch, nrow = 2) + ylab("")
library(maps)
rus <- map_data("world") %>% filter(region == "Russia")
map(rus)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
head(rus)
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long > 59 & long <=60 & lat > 30 & lat < 32)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long > 59 & long <=65 & lat > 30 & lat < 35)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long > 55 & long <= 75 & lat > 25 & lat < 45)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
head(rus)
rus <- map_data("world") %>% filter(region == "Russia") %>% filter(subregion == 2)
head(rus)
rus <- map_data("world") %>% filter(region == "Russia") %>% filter(subregion == 4)
head(rus)
rus <- map_data("world") %>% filter(region == "Russia") %>% filter(subregion == 3)
head(rus)
rus <- map_data("world") %>% filter(region == "Russia")
View(rus)
unique(rus$subregion)
rus <- map_data("world") %>% filter(region == "Russia") %>% filter(subregion == 98)
View(rus)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia")
View(rus)
min(sev_data$longitude)
min(sev_rate$longitude)
min(sev_rate$latitude)
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 59.6400 & lat >= 29.4400)
max(sev_rate$latitude)
max(sev_rate$longitude)
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 59.6400 & lat >= 29.4400) %>%
filter(long <= 60.2400 & lat <= 30.8000)
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 59.6400 & lat >= 29.4400)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 29.4400 & lat >= 59.6300)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 28.4400 & lat >= 59.6300)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 28.4400 & lat >= 55.0000)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 28.4400 & lat >= 55.0000) %>%
filter(long <= 33.0000 & lat <= 62.0000)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 28.4400 & lat >= 58.0000) %>%
filter(long <= 33.0000 & lat <= 61.0000)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 28.0000 & lat >= 58.0000) %>%
filter(long <= 33.0000 & lat <= 61.0000)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>% filter(group = 1309)
rus <- map_data("world") %>% filter(region == "Russia") %>% filter(group == 1309)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
rus <- map_data("world") %>% filter(region == "Russia") %>%
filter(long >= 28.0000 & lat >= 58.0000) %>%
filter(long <= 33.0000 & lat <= 61.0000)
min(rus$order)
max(rus$order)
rus <- map_data("world") %>% filter(region == "Russia") %>% filter(order >= 79363 & order <= 79414)
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black") + coord_quickmap()
ggplot(rus, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
library(sf)
map_data <- sev_rate %>% select(date, casualties, longitude, latitude, sev_class)
p <- ggplot(map_data) + geom_sf()
p +coord_sf(xlim = c(29.5, 32.00), ylim = c(59.70, 60.25))
View(sev_rate)
p <- ggplot(map_data) + geom_sf(aes(x = longitude, y = latitude))
?geom_sf
coord_sf(xlim = c(29.5, 32.00), ylim = c(59.70, 60.25))
ggplot(sev_rate) + coord_sf(xlim = c(29.5, 32.00), ylim = c(59.70, 60.25))
library(dplyr)
library(ggplot2)
library(lubridate)
clean_data <- read.csv("clean_data.csv")
clean_data <- clean_data %>% select(-X)
clean_data <- data.frame(clean_data)
clean_data$date <- ymd(clean_data$date)
clean_data$time <- as.POSIXct(clean_data$time)
clean_data <- clean_data %>% mutate(hour = hour(clean_data$time),
casualties = fatal + injury)
clean_data$month <- month(clean_data$date, label = TRUE)
clean_data$day <- wday(clean_data$date, label = TRUE)
clean_data <- clean_data %>% mutate(cas_type = case_when(
fatal > 0 ~ "fatal",
injury > 0 ~ "injury",
TRUE ~ "non-injury"
))
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
mmonth = month(date),
mday = mday(date),
hhour = hour(time),
mminute = minute(time)) %>%
mutate(timeline = make_datetime(year, mmonth, mday, hhour, mminute))
sev_rate <- sev_rate %>% mutate(sev_class = case_when(
severity > 0.35 ~ "serious",
severity <= 0.35 ~ "moderate"
))
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
sev_rate$cas_type <- as.factor(sev_rate$cas_type)
sev_rate <- sev_rate %>% select(-c(driving_mode, hour, year, mmonth, mday,
hhour, mminute))
head(sev_rate)
summary(sev_rate)
p <- sev_rate %>% filter(sev_class == "serious")
summary(p)
nrow(p$fatal > 0)
p <- sev_rate %>% filter(sev_class == "moderate")
summary(p)
class_serious <- sev_rate %>%
filter(sev_class == "serious") %>% select(cas_type)
class_moderate <- sev_rate %>%
filter(sev_class == "moderate") %>% select(cas_type)
class_serious
nrow(class_serious[cas_type == "injury"])
nrow(class_serious[class_serious$cas_type == "injury"])
head(class_serious)
class_serious[class_serious$cas_type == "fatal",]
nrow(class_serious[class_serious$cas_type == "fatal",])
count(class_serious[class_serious$cas_type == "fatal",])
class_serious[class_serious$cas_type == "fatal",]
summary(class_serious)
summary(class_moderate)
ggplot(sev_rate) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
nodirt_nodust <- sev_rate %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = sev_class), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
summary(sev_rate)
ggplot(sev_rate) + geom_col(aes(x = dtpv, y = casualties, color = severity))
ggplot(sev_rate) + geom_col(aes(x = dtpv, y = casualties))
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, casualties), y = casualties)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, casualties),
y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv),
y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, count),
y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, casualties),
y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = fct_reorder(dtpv, casualties),
y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, casualties),
y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(casualties, dtpv), y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, casualties), y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = dtpv, y = casualties, fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, count(dtpv)), fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, nrow(dtpv)), fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, fatal), fill = weather_cond)) + coord_flip()
ggplot(sev_rate) + geom_col(aes(x = reorder(dtpv, fatal), y = casualties, fill = weather_cond)) + coord_flip()
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = sev_class), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("") + ggtitle("Casualties by time of day")
ggplot(sev_rate) +
geom_col(aes(x = dtpv, y = casualties, fill = weather_cond)) +
coord_flip() + xlab("accident type")
ggplot(sev_rate) +
geom_col(aes(x = dtpv, y = casualties, fill = weather_cond)) +
coord_flip() + xlab("accident type") +
ggtitle("Casualties by type")
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("number of vehicles") +
scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9)) +
facet_wrap(~ kuch, nrow = 2) + ylab("")
library(dplyr)
library(readxl)
mydata <- read_xlsx("data1.xlsx")
mydata
mydata$staff <- mydata$day + mydata$night
mydata
mydata <- mydata %>% select(staff, qty)
mydata
cor(mydata$staff, mydata$qty, method = "pearson")
cor.test(mydata$staff, mydata$qty, method = "pearson")
shapiro.test(mydata$qty)
shapiro.test(mydata$staff)
cor.test(mydata$staff, mydata$qty, method = "pearson")
cor.test(mydata$staff, mydata$qty, method = "spearman")
mydata$staff <- (mydata$day + mydata$night)/2
mydata <- mydata %>% select(staff, qty)
mydata <- read_xlsx("data1.xlsx")
mydata$staff <- (mydata$day + mydata$night)/2
mydata <- mydata %>% select(staff, qty)
cor.test(mydata$staff, mydata$qty, method = "spearman")
cor.test(mydata$staff, mydata$qty, method = "pearson")
undat <- mydata %>% arrange(staff)
undat
undat <- mydata %>% arrange(staff) %>% group_by(staff) %>% summarise(mean(qty))
undat
cor.test(undat$staff, undat$qty, method = "spearman")
undat <- mydata %>% arrange(staff) %>% group_by(staff) %>% summarise(qty = mean(qty))
cor.test(undat$staff, undat$qty, method = "spearman")
plot(mydata$staff, mydata$qty)
library(ggplot2)
ggplot(mydata) +
boxplot(aes(staff, qty))
ggplot(mydata) +
geom_boxplot(aes(staff, qty))
mydata <- mydata %>% mutate(fctst = factor(staff))
ggplot(mydata) +
geom_boxplot(aes(fctst, qty))
library(dplyr)
library(readxl)
mydata <- read_xlsx("data1.xlsx")
mydata$staff <- (mydata$day + mydata$night)/2
mydata <- mydata %>% select(staff, qty)
cor(mydata$staff, mydata$qty, method = "spearman")
cor.test(mydata$staff, mydata$qty, method = "pearson")
undat <- mydata %>% arrange(staff) %>% group_by(staff) %>% summarise(qty = mean(qty))
cor.test(undat$staff, undat$qty, method = "spearman")
rr <- rnorm(30, 0.1, 0.01)
rr
mydata$jitter <- rr
mydata
mydata <- mydata %>% mutate(staff1 = staff + jitter)
ggplot(mydata) +
geom_point(aes(staff1, qty))
# Exploratory data analysis -----------------------------------------------
# prerequisite packages
library(dplyr)
library(ggplot2)
library(lubridate)
# read data
clean_data <- read.csv("clean_data.csv")
clean_data <- clean_data %>% select(-X)
clean_data <- data.frame(clean_data)
clean_data$date <- ymd(clean_data$date)
clean_data$time <- as.POSIXct(clean_data$time)
clean_data <- clean_data %>% mutate(hour = hour(clean_data$time),
casualties = fatal + injury)
clean_data$month <- month(clean_data$date, label = TRUE)
clean_data$day <- wday(clean_data$date, label = TRUE)
clean_data <- clean_data %>% mutate(cas_type = case_when(
fatal > 0 ~ "fatal",
injury > 0 ~ "injury",
TRUE ~ "non-injury"
))
# add severity rate and severity class to dataset
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
mmonth = month(date),
mday = mday(date),
hhour = hour(time),
mminute = minute(time)) %>%
mutate(timeline = make_datetime(year, mmonth, mday, hhour, mminute))
sev_rate <- sev_rate %>% mutate(sev_class = case_when(
severity > 0.35 ~ "serious",
severity <= 0.35 ~ "moderate"
))
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
sev_rate$cas_type <- as.factor(sev_rate$cas_type)
sev_rate <- sev_rate %>% select(-c(driving_mode, hour, year, mmonth, mday,
hhour, mminute))
class_serious <- sev_rate %>%
filter(sev_class == "serious") %>% select(cas_type)
class_moderate <- sev_rate %>%
filter(sev_class == "moderate") %>% select(cas_type)
summary(class_serious)
summary(class_moderate)
# Analysis of frequency ---------------------------------------------------
# histogram of casualties by month and day of week
ggplot(sev_rate) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
# bubble chart of accidents by time and casualties
# exclude dust and dirty road conditions as there are few accidents
nodirt_nodust <- sev_rate %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = sev_class), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("") + ggtitle("Casualties by time of day")
# accidents by type
ggplot(sev_rate) +
geom_col(aes(x = dtpv, y = casualties, fill = weather_cond)) +
coord_flip() + xlab("accident type") +
ggtitle("Casualties by type")
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("number of vehicles") +
scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9)) +
facet_wrap(~ kuch, nrow = 2) + ylab("")
library(dplyr)
library(readxl)
library(ggplot2)
mydata <- read_xlsx("data1.xlsx")
mydata$staff <- (mydata$day + mydata$night)/2
mydata <- mydata %>% select(staff, qty)
cor(mydata$staff, mydata$qty, method = "spearman")
cor.test(mydata$staff, mydata$qty, method = "pearson")
shapiro.test(mydata$qty)
shapiro.test(mydata$staff)
undat <- mydata %>% arrange(staff) %>% group_by(staff) %>% summarise(qty = mean(qty))
cor.test(undat$staff, undat$qty, method = "spearman")
undat
summary(sev_rate)
