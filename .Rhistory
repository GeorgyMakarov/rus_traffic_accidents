severity = casualties / kts_kuch)
head(sev_rate, 10)
sev_rate <- clean_data %>% mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch)
head(sev_rate, 10)
summary(sev_rate$severity)
ggplot(sev_rate) + geom_point(aes(x = time, y = severity))
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
month = month(date),
mday = mday(date))
head(sev_rate)
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch)
head(sev_rate)
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
mmonth = month(date),
mday = mday(date))
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
mmonth = month(date),
mday = mday(date),
hhour = hour(time),
mminute = minute(time))
head(sev_rate)
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
mmonth = month(date),
mday = mday(date),
hhour = hour(time),
mminute = minute(time)) %>%
mutate(timeline = make_datetime(year, mmonth, mday, hhour, mminute))
head(sev_rate)
ggplot(sev_rate) + geom_point(aes(x = timeline, y = severity))
ggplot(sev_rate) + geom_point(aes(x = timeline, y = casualties))
ggplot(sev_rate) + geom_point(aes(x = timeline, y = severity))
test1 <- sev_rate %>% filter(date = "2019-01-01")
test1 <- sev_rate %>% filter(date == "2019-01-01")
ggplot(test1) + geom_point(aes(x = timeline, y = severity))
ggplot(test1) + geom_line(aes(x = timeline, y = severity))
ggplot(sev_rate) + geom_line(aes(x = timeline, y = severity))
ggplot(sev_rate) + geom_line(aes(x = timeline, y = casualties))
ggplot(sev_rate) + geom_line(aes(x = time, y = casualties))
ggplot(sev_rate) + geom_line(aes(x = timeline, y = casualties))
ggplot(sev_rate) +
geom_line(aes(x = date, y = casualties)) + facet_grid
ggplot(sev_rate) +
geom_line(aes(x = date, y = casualties))
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = weather_cond), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
# Exploratory data analysis -----------------------------------------------
# prerequisite packages
library(dplyr)
library(ggplot2)
library(lubridate)
# read data
clean_data <- read.csv("clean_data.csv")
clean_data <- clean_data %>% select(-X)
clean_data <- data.frame(clean_data)
clean_data$date <- ymd(clean_data$date)
clean_data$time <- as.POSIXct(clean_data$time)
clean_data <- clean_data %>% mutate(hour = hour(clean_data$time),
casualties = fatal + injury)
clean_data$month <- month(clean_data$date, label = TRUE)
clean_data$day <- wday(clean_data$date, label = TRUE)
clean_data <- clean_data %>% mutate(cas_type = case_when(
fatal > 0 ~ "fatal",
injury > 0 ~ "injury",
TRUE ~ "non-injury"
))
head(clean_data, 10)
ggplot(clean_data) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
nodirt_nodust <- clean_data %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = weather_cond), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = weather_cond), alpha = 0.5) +
facet_grid(vars(weather_cond), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = weather_cond), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
# Prerequisite libraries
library(reshape2)
library(ggplot2)
library(dplyr)
library(tidyr)
library(lubridate)
library(XML)
library(readr)
library(stringi)
library(stringr)
# Translate data to English -----------------------------------------------
# read in the data
raw_data <- read.csv("raw_data.csv")
raw_data <- raw_data %>% select(-X)
# check unique values in text columns and subsitute them with English words
str(raw_data)
## check accident types
unique(raw_data$dtpv)
raw_data <- raw_data %>%
mutate(dtpv_temp =
ifelse(
dtpv == "Столкновение",
"collision",
ifelse(dtpv == "Наезд на пешехода",
"pedestrian_hit",
ifelse(dtpv == "Наезд на препятствие", "obstacle_hit",
ifelse(dtpv == "Наезд на стоящее ТС", "hit_run",
ifelse(dtpv == "Опрокидывание", "rollover",
ifelse(dtpv == "Съезд с дороги", "off_road",
ifelse(dtpv == "Падение пассажира", "passenger_fall",
ifelse(dtpv == "Иной вид ДТП", "other",
ifelse(dtpv == "Наезд на велосипедиста", "bicycle_hit",
ifelse(dtpv == "Наезд на внезапно возникшее препятствие", "immediate_hit",
ifelse(dtpv == "Наезд на лицо, не являющееся участником дорожного движения, осуществляющее несение службы", "policeman_hit",
ifelse(dtpv == "Отбрасывание предмета", "throwing_object", dtpv)))))))))))))
raw_data$dtpv_temp <- as.factor(raw_data$dtpv_temp)
raw_data$dtpv <- raw_data$dtpv_temp
raw_data <- raw_data %>% select(-dtpv_temp)
## convert date to date format
raw_data$date <- ymd(raw_data$date)
## convert time to time
raw_data$time <- as.POSIXct(raw_data$time)
## check districts
unique(raw_data$district)
raw_data$district <- plyr::revalue(raw_data$district,
c("Василеостровский район" = "vasil", "Калининский район" = "kalin",
"Кировский район" = "kirov", "Приморский район" = "primorsk",
"Адмиралтейский район" = "admiral", "Центральный район" = "center",
"Красногвардейский район" = "krasnogvard", "Фрунзенский район" = "frunz",
"Красносельский район" = "krasnosel", "Невский район" = "nevski",
"Московский район" = "mosk", "Петродворцовый район" = "petrodvorts",
"Пушкинский район" = "pushkin", "Выборгский район" = "vyborg",
"Петроградский район"  = "petrograd", "Колпинский район" = "kolpino",
"Курортный район" = "kurort", "Кронштадтский район" = "kronshtadt"))
## check driving mode
unique(raw_data$driving_mode)
raw_data$driving_mode <- plyr::revalue(raw_data$driving_mode,
c("Режим движения не изменялся" = "open",
"Движение частично перекрыто" = "part_closed",
"Движение полностью перекрыто" = "closed"))
## check road category
unique(raw_data$road_cat)
raw_data$road_cat <- plyr::revalue(raw_data$road_cat,
c("Местного значения (дорога местного значения, включая относящиеся к собственности поселений, муниципальных районов, городских округов)" = "local",
"Региональная или межмуниципальная (дорога регионального или межмуниципального значения)" = "regional",
"Частная (дорога, относящиеся к частной и иным формам собственности)" = "private",
"Не указано" = "not_specified",
"Федеральная (дорога федерального значения)" = "federal",
"Другие места" = "other"))
## check road conditions
unique(raw_data$road_cond)
raw_data$road_cond <- plyr::revalue(raw_data$road_cond,
c("Обработанное противогололедными материалами" = "wet",
"Заснеженное" = "snow", "Мокрое" = "wet",
"Загрязненное" = "dirty", "Пасмурно" = "unknown",
"Ясно" = "unknown", "Снегопад" = "snow", "Сухое" = "dry",
"Со снежным накатом" = "snow", "Гололедица" = "sleet",
"Дождь" = "wet", "Пыльное" = "dust"))
## check weather conditions
unique(raw_data$weather_cond)
raw_data$weather_cond <- plyr::revalue(raw_data$weather_cond,
c("Ясно " = "clear", " Пасмурно" = "clouds",
"Пасмурно " = "clouds", "Снегопад " = "snow",
"Сведения отсутствуют " = "unknown",
" Снегопад" = "snow", " Ясно" = "clear",
"Пасмурно Снегопад" = "snow", "Метель " = "snow",
"Сужение проезжей части припаркованным транспортом " = "unknown",
"Дождь " = "rain", "Конструктивное сужение проезжей части вследствие уменьшения количества полос движения " = "unknown",
"Пасмурно Дождь" = "rain", "Пасмурно Метель" = "snow", " Дождь" = "rain",
"Неправильное применение, плохая видимость дорожных знаков Сведения отсутствуют" = "unknown",
"Сужение проезжей части вследствие проведения работ " = "unknown", "Ясно Дождь" = "rain", "Пасмурно Туман" = "fog",
"Туман " = "fog"))
# Clean data --------------------------------------------------------------
# check unspecified values in factor columns that came from second dataset
levels(raw_data$road_cat)
str(raw_data$road_cat)
levels(raw_data$road_cond) # we have empty rows that do not read as NA
str(raw_data$road_cond)
levels(raw_data$road_cond)[levels(raw_data$road_cond) == ""] <- "unknown"
levels(raw_data$weather_cond)
str(raw_data$weather_cond)
levels(raw_data$driving_mode)
str(raw_data$driving_mode)
levels(raw_data$dtpv)
str(raw_data$dtpv)
# final check on the summary
summary(raw_data)
# write clean data set
write.csv(raw_data, "clean_data.csv")
# Exploratory data analysis -----------------------------------------------
# prerequisite packages
library(dplyr)
library(ggplot2)
library(lubridate)
# read data
clean_data <- read.csv("clean_data.csv")
clean_data <- clean_data %>% select(-X)
clean_data <- data.frame(clean_data)
clean_data$date <- ymd(clean_data$date)
clean_data$time <- as.POSIXct(clean_data$time)
clean_data <- clean_data %>% mutate(hour = hour(clean_data$time),
casualties = fatal + injury)
clean_data$month <- month(clean_data$date, label = TRUE)
clean_data$day <- wday(clean_data$date, label = TRUE)
clean_data <- clean_data %>% mutate(cas_type = case_when(
fatal > 0 ~ "fatal",
injury > 0 ~ "injury",
TRUE ~ "non-injury"
))
head(clean_data, 10)
ggplot(clean_data) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
nodirt_nodust <- clean_data %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = weather_cond), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
mmonth = month(date),
mday = mday(date),
hhour = hour(time),
mminute = minute(time)) %>%
mutate(timeline = make_datetime(year, mmonth, mday, hhour, mminute))
ggplot(sev_rate) +
geom_point(aes(x = kts , y = kuch))
ggplot(sev_rate) +
geom_point(aes(x = kts , y = kuch)) +
geom_smooth()
ggplot(sev_rate) +
geom_point(aes(x = kts , y = kuch)) +
geom_smooth(aes(x = kts, y = kuch))
ggplot(sev_rate) +
geom_point(aes(x = kts , y = sev_rate))
ggplot(sev_rate) +
geom_point(aes(x = kts , y = severity))
ggplot(sev_rate) +
geom_boxplot(aes(x = kts , y = severity))
ggplot(sev_rate) +
geom_point(aes(x = kts , y = severity))
ggplot(sev_rate) +
geom_point(aes(x = kts , y = kuch))
ggplot(sev_rate) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
nodirt_nodust <- sev_rate %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = weather_cond), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
sev_rate <- sev_rate %>% mutate(sev_class = case_when(
severity > 0.5 ~ "serious",
severity <= 0.5 ~ "moderate"
))
str(sev_rate)
summary(sev_rate)
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
summary(sev_rate)
sev_rate <- sev_rate %>% mutate(sev_class = case_when(
severity > 0.3 ~ "serious",
severity <= 0.3 ~ "moderate"
))
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
summary(sev_rate)
sev_rate <- sev_rate %>% mutate(sev_class = case_when(
severity > 0.4 ~ "serious",
severity <= 0.4 ~ "moderate"
))
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
summary(sev_rate)
sev_rate <- sev_rate %>% mutate(sev_class = case_when(
severity > 0.35 ~ "serious",
severity <= 0.35 ~ "moderate"
))
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
summary(sev_rate)
sev_rate$cas_type <- as.factor(sev_rate$cas_type)
ggplot(sev_rate) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
nodirt_nodust <- sev_rate %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = weather_cond), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = sev_class), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
sev_rate <- sev_rate %>% select(-c(driving_mode, hour, year, mmonth, mday,
hhour, mminute))
head(sev_rate)
nodirt_nodust <- sev_rate %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(sev_rate, aes(dtpv, kts, fill = severity)) +
geom_tile(color = "white")
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white")
ggplot(sev_rate, aes(kts, dtpv, fill = casualties)) +
geom_tile(color = "white")
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white")
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + facet_wrap(~ kuch, nrow = 2)
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") # facet_wrap(~ kuch, nrow = 2)
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("количество машин")
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("количество машин") +
scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9))
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("количество машин") +
scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9)) +
facet_wrap(~ kuch, nrow = 2)
pass_fall <- sev_rate %>% filter(dtpv == "passenger_fall" & kuch == 11)
pass_fall
View(pass_fall)
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("number of vehicles") +
scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9)) +
facet_wrap(~ kuch, nrow = 2) + ylab("")
filter(sev_rate, dtpv == "collision" & kuch == 17)
# Exploratory data analysis -----------------------------------------------
# prerequisite packages
library(dplyr)
library(ggplot2)
library(lubridate)
# read data
clean_data <- read.csv("clean_data.csv")
clean_data <- clean_data %>% select(-X)
clean_data <- data.frame(clean_data)
clean_data$date <- ymd(clean_data$date)
clean_data$time <- as.POSIXct(clean_data$time)
clean_data <- clean_data %>% mutate(hour = hour(clean_data$time),
casualties = fatal + injury)
clean_data$month <- month(clean_data$date, label = TRUE)
clean_data$day <- wday(clean_data$date, label = TRUE)
clean_data <- clean_data %>% mutate(cas_type = case_when(
fatal > 0 ~ "fatal",
injury > 0 ~ "injury",
TRUE ~ "non-injury"
))
# add severity rate and severity class to dataset
sev_rate <- clean_data %>%
mutate(kts_kuch = kts + kuch,
severity = casualties / kts_kuch) %>%
mutate(year = year(date),
mmonth = month(date),
mday = mday(date),
hhour = hour(time),
mminute = minute(time)) %>%
mutate(timeline = make_datetime(year, mmonth, mday, hhour, mminute))
sev_rate <- sev_rate %>% mutate(sev_class = case_when(
severity > 0.35 ~ "serious",
severity <= 0.35 ~ "moderate"
))
sev_rate$sev_class <- as.factor(sev_rate$sev_class)
sev_rate$cas_type <- as.factor(sev_rate$cas_type)
sev_rate <- sev_rate %>% select(-c(driving_mode, hour, year, mmonth, mday,
hhour, mminute))
head(sev_rate)
# Analysis of frequency ---------------------------------------------------
# histogram of casualties by month and day of week
ggplot(sev_rate) + geom_col(aes(month, casualties, fill = day)) +
ggtitle("Casualties in 2019 by month and day of week")
# bubble chart of accidents by time and casualties
# exclude dust and dirty road conditions as there are few accidents
nodirt_nodust <- sev_rate %>% filter(!road_cond %in% c("dirty", "dust"))
no_sleet <- nodirt_nodust %>% filter(!road_cond == "sleet")
ggplot(no_sleet) +
geom_point(aes(x = time, y = casualties,
size = casualties, color = sev_class), alpha = 0.5) +
facet_grid(vars(day), vars(road_cond)) +
#scale_color_gradientn(colors = c("blue", "yellow", "red")) +
theme(axis.text = element_blank(), axis.ticks = element_blank()) +
xlab("") + ylab("")
# severity of accident by number of participants and vehicles and types
ggplot(sev_rate, aes(kts, dtpv, fill = severity)) +
geom_tile(color = "white") + xlab("number of vehicles") +
scale_x_continuous(breaks = c(1, 2, 3, 4, 5, 6, 7, 8, 9)) +
facet_wrap(~ kuch, nrow = 2) + ylab("")
library(maps)
?maps
??maps
data("world.cities")
world.cities
filter(world.cities, country.etc == "Russia")
filter(world.cities, country.etc == "Russia" & name == "Saint-Petersburg")
filter(world.cities, country.etc == "Russia")
p <- filter(world.cities, country.etc == "Russia")
View(p)
map.cities(country = "China", capitals = 2)
library(maps)
map.cities(country = "China", capitals = 2)
map("world", "China")
map.cities(country = "China", capitals = 2)
map("state", "New Jersey")
data(us.cities)
map.cities(us.cities, country="NJ")
?map
help(package == 'maps')
help(package = 'maps')
data <- world.cities %>% filter(country.etc == "Russia" & name == "Saint Petersburg")
map(data)
map("world", "Saint Petersburg")
?maps
?map
russia <- map_data("russia")
russia <- map_data("Russia")
library(maps)
UK <- map_data("world") %>% filter(region=="UK")
data <- world.cities %>% filter(country.etc == "UK")
ggplot() +
geom_polygon(data = UK, aes(x = long, y = lat, group = group), fill = "grey", alpha = 0.3)
?world
data(world)
data(worldMapEnv)
worldMapEnv
UK <- map_data("world") %>% filter(region == "Russia")
ggplot() +
geom_polygon(data = UK, aes(x = long, y = lat, group = group), fill = "grey", alpha = 0.3)
UK <- map_data("world.cities") %>% filter(region == "Russia") %>% filter(name == "Saint Petersburg")
UK <- map_data("world") %>% filter(region == "Russia") %>% filter(name == "Saint Petersburg")
UK <- map_data("world") %>% filter(region == "Russia")
?map_data
library(plotly)
fig <- sev_rate
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = severity,
radius = 10)
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = 'severity',
radius = 10)
fig
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = 'severity',
radius = 10)
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = 'severity',
radius = 10)
fig <- sev_rate
fig <- fig %>%
plot_ly(
type = 'densitymapbox',
lat = ~ latitude,
lon = ~ longitude,
coloraxis = 'severity',
radius = 10)
fig
